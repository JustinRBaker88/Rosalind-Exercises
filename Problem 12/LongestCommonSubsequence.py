import numpy


def generateScoreMatrix(strand1, strand2):
    n = len(strand1) +1
    m = len(strand2) +1
    scoreMatrix = numpy.zeros((n, m))
    
    for i in range(1, n):
        for j in range(1, m):
            above = 0
            left = 0
            diag = 0
            if (strand1[i-1] != strand2[j-1]):
                left = scoreMatrix[i][j-1]
                above = scoreMatrix[i-1][j]
                scoreMatrix[i][j] = max(left, above)
            else:
                scoreMatrix[i][j] = scoreMatrix[i-1][j-1] + 1
                
    return scoreMatrix
    
def getLongestSubsequence(strand1, strand2):
    scoreMatrix = generateScoreMatrix(strand1, strand2)
    n = len(strand1)
    m = len(strand2)
    lcs = []
    
    while m > 0 and n > 0:
        if (strand1[n-1] == strand2[m-1]):
            lcs.insert(0, strand1[n-1])
            n -= 1
            m -= 1
        elif (scoreMatrix[n-1][m] > scoreMatrix[n][m-1]):
            n -= 1
        else:
            m -= 1
 
    return "".join(lcs)      
 

s1 = "TTGTTGGCCAAAGTCGTTGGTAGACAGCGAGCATGATCGGACTAATTATCCCACCCAACACCTAGCCCGACTGAGCTCATCACGGGCTGATCATCATCACCCTACTTCCTACTATAGTACCACAGATCTATCATAGTAAAGGCTTCCATACGCAAGCCTAGTCTACTCTATCGGCATGAATGGAGGTGTCGACCAGCAACAACAGTTTCGAACCTAGTGTCAAACGTCAAGAGACCGGACTCATAATTAGGCATTACACTCTACTGCTCTCTCCAGTACTCTATATGGGGTTGGGTCTCAATACCTTGTTTGCTTGGACATTCTCAATATTGTCCAAACGACCTCCTGGAGTCCTTTGACAATTGCATGCCCCGGATCCGTTATACAATGGAACCAAACGCACGCGGCTGCTGTGACAAGATAATGGGGTCCTCTGAGTCAAGTGAGCCTCCTTCTCCCCCCAGTGGACGCAATCAAATTCTTGTGGAAAGCGAATGGTTAGACACCCAAGATCAATCAGGCCGATCGCTCAGACAGAGCTTCAGGCGATTCAGCAGGCGGCGGATTTCCCGTACGTAGCATGTTTTATGCGTACCCACGATTTTACGCTATGCGGTGCCGATCGCCATATTGCGAACTCGTGTCGCGTCGATTCACAGGCAACAGGCACATAGCTCATCGATTCTCCCCAGGAGGACTGCAAACTCCAAACACCAGTACGCCGGGCCCCGTGTCGGCAATGATGCTGGGGCGCACTAACAAGAGTGTAGCTAATGAATTCAATGCCCGTGATCTTTAGCTGTCAGCGAAGTCGCACACGTTTGAAACTCTAATAGGGAACCGCACAGGTGTACTATGTACTAGGG"
s2 = "AGCTTCGGCGGTGATTTCCAATCTTATTTTCGCGGCGTAAATTTTTTTGACGCTGGCGTCCACGAAGTGAGATGGCCTAAGTAATCACTGCATTTCCGGCATTTTCTTCCTATATATCTACGACAAACGTCAGCTTACTGATCTTGTATTGATATGACCCGCAGTCGTAACGAGGCTCTAGTTTCAAAGCCCGATATCCGTACCGCATTCATTAGAATAGAGGGAGCCTATATTCGAAACCGGCAATCTTTACTAGTCCATTGGAACTGAAAATCCAGGCGGTAGCGCGTCTCGCAAACTTCTCGGATAAGTAAAAAACGCTAGCTTCTCAACGCCTCGGTATACTTTAGCAACGATCGCGCAATGTCAGCGCGGTTCCCGCCGATGGATTTCAGGTCTGGACCGGTGCTGATAGCTAACATAATCATGGACAGTGACAGTCATCATGGTTCCTACGAGCTTTGCGTGGTAATAACATAAATACCAGCATTCTCCATAGGAACGTCCGCGGGTATTGCATACTCCAGAGGCAAATTATAGTTCAAATCCTGACCTATTGCACCACTTTAAGACTCCGACTGGTGTAACGCGCGGGATCCTACAGCTCAAATTGTTCTGGGCTACAATTGGAGCGTTCATCATTGCTCCTGGTTCTGTATCTTTGAAGGGGAGCTACGTGAACTAATGCGAAGTGGTCTTTGGAAGATCATAGGCACCAGTCATATAGCCCGAATCCATAGCACGACCCGACACTCCTCGGCGTCTGTCCCCTTAAAGGGGTGTTCGCCATTCGACACTACACTTTACCTTCTTGCATT"

print(getLongestSubsequence(s1,s2))